<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bargains.dao.OrderEntityMapper">
  <resultMap id="BaseResultMap" type="com.bargains.entity.OrderEntity">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="product_quantity" jdbcType="INTEGER" property="productQuantity" />
    <result column="product_id" jdbcType="INTEGER" property="productId" />
    <result column="pay_amount" jdbcType="INTEGER" property="payAmount" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="merchant_id" jdbcType="INTEGER" property="merchantId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="pay_time" jdbcType="TIMESTAMP" property="payTime" />
    <result column="pay_type" jdbcType="INTEGER" property="payType" />
    <result column="pay_status" jdbcType="INTEGER" property="payStatus" />
    <result column="receiving_address" jdbcType="VARCHAR" property="receivingAddress" />
    <result column="receiving_phone" jdbcType="VARCHAR" property="receivingPhone" />
    <result column="receiving_name" jdbcType="VARCHAR" property="receivingName" />
    <result column="trade_serial_number" jdbcType="VARCHAR" property="tradeSerialNumber" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, product_quantity, product_id, pay_amount, user_id, merchant_id, create_time, 
    pay_time, pay_type, pay_status, receiving_address, receiving_phone, receiving_name, 
    trade_serial_number
  </sql>
  <select id="selectByExample" parameterType="com.bargains.entity.OrderEntityExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.bargains.entity.OrderEntityExample">
    delete from order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="com.bargains.entity.OrderEntity">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="productQuantity != null">
        product_quantity,
      </if>
      <if test="productId != null">
        product_id,
      </if>
      <if test="payAmount != null">
        pay_amount,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="merchantId != null">
        merchant_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="payTime != null">
        pay_time,
      </if>
      <if test="payType != null">
        pay_type,
      </if>
      <if test="payStatus != null">
        pay_status,
      </if>
      <if test="receivingAddress != null">
        receiving_address,
      </if>
      <if test="receivingPhone != null">
        receiving_phone,
      </if>
      <if test="receivingName != null">
        receiving_name,
      </if>
      <if test="tradeSerialNumber != null">
        trade_serial_number,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="productQuantity != null">
        #{productQuantity,jdbcType=INTEGER},
      </if>
      <if test="productId != null">
        #{productId,jdbcType=INTEGER},
      </if>
      <if test="payAmount != null">
        #{payAmount,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="merchantId != null">
        #{merchantId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payTime != null">
        #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payType != null">
        #{payType,jdbcType=INTEGER},
      </if>
      <if test="payStatus != null">
        #{payStatus,jdbcType=INTEGER},
      </if>
      <if test="receivingAddress != null">
        #{receivingAddress,jdbcType=VARCHAR},
      </if>
      <if test="receivingPhone != null">
        #{receivingPhone,jdbcType=VARCHAR},
      </if>
      <if test="receivingName != null">
        #{receivingName,jdbcType=VARCHAR},
      </if>
      <if test="tradeSerialNumber != null">
        #{tradeSerialNumber,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.bargains.entity.OrderEntityExample" resultType="java.lang.Integer">
    select count(*) from order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update order
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.productQuantity != null">
        product_quantity = #{record.productQuantity,jdbcType=INTEGER},
      </if>
      <if test="record.productId != null">
        product_id = #{record.productId,jdbcType=INTEGER},
      </if>
      <if test="record.payAmount != null">
        pay_amount = #{record.payAmount,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.merchantId != null">
        merchant_id = #{record.merchantId,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.payTime != null">
        pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.payType != null">
        pay_type = #{record.payType,jdbcType=INTEGER},
      </if>
      <if test="record.payStatus != null">
        pay_status = #{record.payStatus,jdbcType=INTEGER},
      </if>
      <if test="record.receivingAddress != null">
        receiving_address = #{record.receivingAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.receivingPhone != null">
        receiving_phone = #{record.receivingPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.receivingName != null">
        receiving_name = #{record.receivingName,jdbcType=VARCHAR},
      </if>
      <if test="record.tradeSerialNumber != null">
        trade_serial_number = #{record.tradeSerialNumber,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update order
    set id = #{record.id,jdbcType=INTEGER},
      product_quantity = #{record.productQuantity,jdbcType=INTEGER},
      product_id = #{record.productId,jdbcType=INTEGER},
      pay_amount = #{record.payAmount,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      merchant_id = #{record.merchantId,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      pay_type = #{record.payType,jdbcType=INTEGER},
      pay_status = #{record.payStatus,jdbcType=INTEGER},
      receiving_address = #{record.receivingAddress,jdbcType=VARCHAR},
      receiving_phone = #{record.receivingPhone,jdbcType=VARCHAR},
      receiving_name = #{record.receivingName,jdbcType=VARCHAR},
      trade_serial_number = #{record.tradeSerialNumber,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.bargains.entity.OrderEntity">
    update order
    <set>
      <if test="productQuantity != null">
        product_quantity = #{productQuantity,jdbcType=INTEGER},
      </if>
      <if test="productId != null">
        product_id = #{productId,jdbcType=INTEGER},
      </if>
      <if test="payAmount != null">
        pay_amount = #{payAmount,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="merchantId != null">
        merchant_id = #{merchantId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payTime != null">
        pay_time = #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payType != null">
        pay_type = #{payType,jdbcType=INTEGER},
      </if>
      <if test="payStatus != null">
        pay_status = #{payStatus,jdbcType=INTEGER},
      </if>
      <if test="receivingAddress != null">
        receiving_address = #{receivingAddress,jdbcType=VARCHAR},
      </if>
      <if test="receivingPhone != null">
        receiving_phone = #{receivingPhone,jdbcType=VARCHAR},
      </if>
      <if test="receivingName != null">
        receiving_name = #{receivingName,jdbcType=VARCHAR},
      </if>
      <if test="tradeSerialNumber != null">
        trade_serial_number = #{tradeSerialNumber,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>